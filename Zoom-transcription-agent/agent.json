{
    "nodes": [
      {
        "parameters": {},
        "id": "7ebe22f7-f94f-4d48-925a-46f0877b72f8",
        "name": "When clicking ‘Test workflow’",
        "type": "n8n-nodes-base.manualTrigger",
        "position": [
          -220,
          360
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "errorMessage": "={{ $json.error.cause.message }}"
        },
        "id": "88e8e62a-cfcc-4c96-a8b2-4a52a8c55c6b",
        "name": "No Recording/Transcript available",
        "type": "n8n-nodes-base.stopAndError",
        "position": [
          220,
          460
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "ef149af8-7f9d-4e5a-8ccf-4a5f1e09eecc",
                "name": "transcript_file",
                "type": "string",
                "value": "={{ $json.recording_files.find(f => f.file_type === 'TRANSCRIPT').download_url }}"
              }
            ]
          },
          "options": {}
        },
        "id": "987839f0-e1d0-4cba-9c15-480efef0c62c",
        "name": "Filter transcript URL",
        "type": "n8n-nodes-base.set",
        "position": [
          220,
          260
        ],
        "typeVersion": 3.4,
        "onError": "continueRegularOutput"
      },
      {
        "parameters": {
          "options": {}
        },
        "id": "2c51a3f7-c202-48dd-85b8-0d5d34b21771",
        "name": "Filter: Only 1 item",
        "type": "n8n-nodes-base.splitInBatches",
        "position": [
          440,
          260
        ],
        "typeVersion": 3
      },
      {
        "parameters": {
          "url": "={{ $json.transcript_file }}",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "zoomOAuth2Api",
          "options": {}
        },
        "id": "35c2bfc1-30e1-4c85-ad47-3ea10132582f",
        "name": "Zoom: Get transcript file",
        "type": "n8n-nodes-base.httpRequest",
        "position": [
          660,
          260
        ],
        "typeVersion": 4.2,
        "credentials": {
          "zoomOAuth2Api": {
            "id": "LGwhtLVR5qLDevOa",
            "name": "Zoom account"
          }
        }
      },
      {
        "parameters": {
          "operation": "text",
          "options": {}
        },
        "id": "7155361b-37a4-4aca-9e18-505ee25b75b4",
        "name": "Extract text from transcript file",
        "type": "n8n-nodes-base.extractFromFile",
        "position": [
          880,
          260
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "70019192-02ef-4b0a-a747-3ca5f46aeeaa",
                "name": "transcript",
                "type": "string",
                "value": "={{ $json.data.split('\\r\\n\\r\\n').slice(1).map(block => {\n    const lines = block.split('\\r\\n');\n    return lines.slice(2).join(' ');\n}).join('\\n') }}"
              }
            ]
          },
          "options": {}
        },
        "id": "19b4afa7-a22c-4c4f-be6f-6f7e0b523231",
        "name": "Format transcript text",
        "type": "n8n-nodes-base.set",
        "position": [
          1100,
          260
        ],
        "typeVersion": 3.4
      },
      {
        "parameters": {
          "url": "=https://api.zoom.us/v2/past_meetings/6381757417/participants",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "zoomOAuth2Api",
          "options": {}
        },
        "id": "05d532d8-45a7-4cfa-9d20-8aae37c2d197",
        "name": "Zoom: Get participants data",
        "type": "n8n-nodes-base.httpRequest",
        "position": [
          1320,
          260
        ],
        "typeVersion": 4.2,
        "credentials": {
          "zoomOAuth2Api": {
            "id": "LGwhtLVR5qLDevOa",
            "name": "Zoom account"
          }
        }
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "cc51b7e4-d5c2-4cd4-9488-4d181eaaa02e",
                "name": "subject",
                "type": "string",
                "value": "=Meeting summary: {{ $('Zoom: Get transcripts data').item.json.topic }} on {{ DateTime.fromISO($('Zoom: Get transcripts data').item.json.start_time).toFormat('yyyy-MM-dd HH:mm') }}"
              },
              {
                "id": "f3940ea2-9084-4c25-828e-5ddaa428ec83",
                "name": "=to",
                "type": "string",
                "value": "={{ $('Zoom: Get participants data').item.json.participants[0].user_email }}"
              },
              {
                "id": "1211af5b-2240-44ce-9df7-63d93f57806e",
                "name": "body",
                "type": "string",
                "value": "={{ $json.output }}"
              }
            ]
          },
          "options": {}
        },
        "id": "bf9531dc-8f53-417f-aabc-399b30519b48",
        "name": "Sort for mail delivery",
        "type": "n8n-nodes-base.set",
        "position": [
          2000,
          100
        ],
        "typeVersion": 3.4
      },
      {
        "parameters": {
          "jsCode": "const items = [];\n\nfor (const item of $input.all()) {\n  const body = item.json.body;\n  if (!body) continue;\n\n  // Simple split approach\n  const sections = body.split('\\n\\n');\n  const title = sections[0].replace(/\\*\\*/g, '');\n  const participants = sections[1].split('\\n').slice(1).join('\\n');\n  const summary = sections[2].split('\\n').slice(1).join('\\n');\n  const tasks = sections[3].split('\\n').slice(1).join('\\n');\n  const dates = sections[4].split('\\n').slice(1).join('\\n');\n\n  const html = `<html>\n<body style=\"font-family: Arial, sans-serif; max-width: 800px; margin: 20px;\">\n<h1 style=\"color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px;\">${title}</h1>\n<h2 style=\"color: #2c3e50; margin-top: 20px;\">Participants:</h2>\n<ul style=\"list-style-type: none; padding-left: 20px;\">\n${participants.split('\\n').map(p => `<li>${p.replace('- ', '')}</li>`).join('\\n')}\n</ul>\n<h2 style=\"color: #2c3e50; margin-top: 20px;\">Meeting Summary:</h2>\n<p style=\"margin-left: 20px;\">${summary}</p>\n<h2 style=\"color: #2c3e50; margin-top: 20px;\">Tasks:</h2>\n<ul style=\"margin-left: 20px;\">\n${tasks.split('\\n').map(t => `<li>${t.replace('- ', '')}</li>`).join('\\n')}\n</ul>\n<h2 style=\"color: #2c3e50; margin-top: 20px;\">Important Dates:</h2>\n<ul style=\"margin-left: 20px;\">\n${dates.split('\\n').map(d => `<li>${d.replace('- ', '')}</li>`).join('\\n')}\n</ul>\n</body>\n</html>`;\n\n  items.push({\n    json: {\n      html,\n      to: item.json.to,\n      subject: item.json.subject\n    }\n  });\n}\n\nreturn items;"
        },
        "id": "769eddd2-47fa-4c22-857f-192ae24b6cce",
        "name": "Format to html",
        "type": "n8n-nodes-base.code",
        "position": [
          2300,
          100
        ],
        "typeVersion": 2
      },
      {
        "parameters": {
          "name": "create_task",
          "description": "=Use this tool to create a task. \nFor task creation use only action items for me Friedemann, don't use action items for other participants.",
          "workflowId": {
            "__rl": true,
            "mode": "list",
            "value": "zSKQLEObdU9RiThI",
            "cachedResultName": "create_task"
          },
          "specifyInputSchema": true,
          "schemaType": "manual",
          "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"items\": {\n        \"type\": \"array\",\n        \"description\": \"An array of tasks\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": {\n              \"type\": \"string\",\n              \"description\": \"The name of the task\"\n            },\n            \"description\": {\n              \"type\": \"string\",\n              \"description\": \"A detailed description of the task\"\n            },\n            \"due_date\": {\n              \"type\": \"string\",\n              \"description\": \"Due Date\"\n            },\n            \"priority\": {\n              \"type\": \"string\",\n              \"description\": \"Priority. . Please capitalize first letter\"\n            },\n            \"project_name\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project. Word 'Project' shouldn't be included\"\n            }\n          },\n          \"required\": [\n            \"name\",\n            \"description\",\n            \"due_date\",\n            \"priority\"\n          ],\n          \"additionalProperties\": false\n        }\n      }\n    },\n    \"required\": [\n      \"items\"\n    ],\n    \"additionalProperties\": false\n}"
        },
        "id": "da7e2d83-f4d4-499f-916e-e8c720e49ddd",
        "name": "Create tasks",
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "position": [
          2200,
          720
        ],
        "typeVersion": 1.3
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=<system_prompt>\n\nTODAY IS: {{ $now }}\n\nYOU ARE A MEETING ASSISTANT FOR AUTOMATION IN N8N. YOUR TASK IS TO EFFICIENTLY AND PRECISELY PROCESS INFORMATION FROM ZOOM MEETINGS TO GENERATE TO-DOS AND SCHEDULE FOLLOW-UP MEETINGS. YOU HAVE ACCESS TO THE FOLLOWING DATA:\n\n### INPUTS ###\n- **MEETING TITLE**: {{ $('Zoom: Get transcripts data').item.json.topic }}\n- **PARTICIPANTS**: {{ $('Zoom: Get participants data').item.json.participants[0].name }}\n- **TRANSCRIPT**: {{ $('Format transcript text').item.json.transcript }}\n\n### YOUR TASKS ###\n1. **CREATE TO-DOS**:\n   - IDENTIFY TASKS AND TO-DOS IN THE TRANSCRIPT.\n   - FORMULATE CLEAR, CONCRETE TASKS.\n   - PASS THESE TASKS TO THE TOOL \"Create tasks\" TO SAVE THEM IN CLICKUP. \n   - DATA STRUCTURE:\n     - **TASK DESCRIPTION**: Brief description of the task.\n     - **ASSIGNED PERSON**: First name from the participant list.\n     - **DUE DATE**: Use any date mentioned in the transcript; otherwise, set to \"Not specified.\"\n\n2. **CREATE MEETING**:\n   - ANALYZE THE TRANSCRIPT TO IDENTIFY INFORMATION ABOUT THE NEXT MEETING (DATE, TIME, AND TOPIC).\n   - PASS THIS INFORMATION TO THE TOOL \"Create follow-up call.\"\n   - DATA STRUCTURE:\n     - **MEETING TITLE**: \"Follow-up: [Meeting Title]\"\n     - **DATE AND TIME**: Determined from the transcript or set to \"Next Tuesday at 10:00 AM\" if no information is provided.\n     - **PARTICIPANTS**: Add all participants from the list.\n\n### CHAIN OF THOUGHTS ###\n1. **UNDERSTAND**: Read and analyze the provided inputs (title, participants, transcript).\n2. **IDENTIFY**: Extract relevant information for the to-dos and the next meeting.\n3. **DIVIDE**: Split the task into two separate processes: creating to-dos and creating the meeting.\n4. **STRUCTURE**: Format the results in the required structure for the respective tools.\n5. **TRANSMIT**: Pass the data to the designated tools in n8n.\n6. **VERIFY**: Ensure the data is correct and complete.\n\n### WHAT YOU SHOULD NOT DO ###\n- **NEVER**: Create unclear or vague to-dos.\n- **NEVER**: Ignore missing data – use default values where uncertain.\n- **NEVER**: Overlook information from the inputs or make incorrect connections.\n- **NEVER**: Transmit tasks or meetings without proper formatting.\n\n### OUTPUT EXAMPLES ###\n1. **TO-DO**:\n   - **TASK DESCRIPTION**: \"Prepare presentation for the next meeting.\"\n   - **ASSIGNED PERSON**: \"John Doe.\"\n   - **DUE DATE**: \"2025-01-25.\"\n\n2. **MEETING**:\n   - **MEETING TITLE**: \"Follow-up: Project Discussion.\"\n   - **DATE AND TIME**: \"2025-01-28 at 10:00 AM.\"\n   - **PARTICIPANTS**: \"John Doe, Jane Example.\"\n\n### NOTES ###\n- EXECUTE YOUR TASKS WITH THE HIGHEST PRECISION AND CONTEXT SENSITIVITY.\n- RELY ON THE PROVIDED DATA AND DEFAULT VALUES WHERE NECESSARY.\n</system_prompt>\n",
          "options": {}
        },
        "id": "1f3e26f5-2df3-4c51-9676-1e2bef095837",
        "name": "Create tasks and follow-up call",
        "type": "@n8n/n8n-nodes-langchain.agent",
        "position": [
          1900,
          380
        ],
        "typeVersion": 1.7
      },
      {
        "parameters": {
          "url": "=https://api.zoom.us/v2/meetings/6381757417/recordings",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "zoomOAuth2Api",
          "options": {}
        },
        "id": "e218ef3f-7f1d-4c4b-8b5e-a32f83ad22ad",
        "name": "Zoom: Get transcripts data",
        "type": "n8n-nodes-base.httpRequest",
        "position": [
          0,
          360
        ],
        "typeVersion": 4.2,
        "credentials": {
          "zoomOAuth2Api": {
            "id": "LGwhtLVR5qLDevOa",
            "name": "Zoom account"
          }
        },
        "onError": "continueErrorOutput"
      },
      {
        "parameters": {},
        "id": "24fe89b0-12bd-499a-aff0-8a0917fb5856",
        "name": "Think",
        "type": "@n8n/n8n-nodes-langchain.toolThink",
        "position": [
          2000,
          740
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=Create a formal meeting minutes document from the following transcript and meeting details.\n\nMeeting Date: {{ $('Zoom: Get transcripts data').item.json.start_time }} // This needs to be formatted from the meeting details\nParticipants: {{ $json.participants.map(p => p.name + ' (' + p.user_email + ')').join(', ') }}\n\nTranscript:\n{{ $('Format transcript text').item.json.transcript }}\n\nPlease create the minutes in the following format:\n\nMeeting on [Date]\n\nParticipants:\n[List of participants with email addresses]\n\nSummary of the Meeting:\n[Brief and concise summary of the topics discussed]\n\nTasks:\n- [Task] (Responsible: [Name])\n- ...\n\nImportant Dates:\n- [Date] ([Context])\n- ...\n",
          "options": {}
        },
        "id": "deb72fdc-eaa4-4072-a6ed-b7e214b63382",
        "name": "Create meeting summary",
        "type": "@n8n/n8n-nodes-langchain.agent",
        "position": [
          1540,
          260
        ],
        "typeVersion": 1.9
      },
      {
        "parameters": {
          "model": {
            "__rl": true,
            "mode": "list",
            "value": "gpt-4o-mini"
          },
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "typeVersion": 1.2,
        "position": [
          1820,
          680
        ],
        "id": "e1e193bf-1c8d-42a4-9799-82197015e261",
        "name": "OpenAI Chat Model",
        "credentials": {
          "openAiApi": {
            "id": "mZmtXFUS96bmcfEG",
            "name": "OpenAi account 2"
          }
        }
      },
      {
        "parameters": {
          "resource": "draft",
          "subject": "={{ $json.subject }}",
          "emailType": "html",
          "message": "={{ $json.html }}",
          "options": {}
        },
        "type": "n8n-nodes-base.gmail",
        "typeVersion": 2.1,
        "position": [
          2560,
          100
        ],
        "id": "892a203a-be36-4c6d-a21d-e78592fbd619",
        "name": "Gmail",
        "webhookId": "3f142eae-70f1-4df9-9423-63b74a1142ea",
        "credentials": {
          "gmailOAuth2": {
            "id": "xdhUrQDjFlS2oDx0",
            "name": "Himanshu Gmail"
          }
        }
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "additionalFields": {}
        },
        "type": "n8n-nodes-base.zoomTool",
        "typeVersion": 1,
        "position": [
          2320,
          660
        ],
        "id": "f7d77e31-e1b5-495c-9bc7-d4414d83a244",
        "name": "Zoom",
        "credentials": {
          "zoomOAuth2Api": {
            "id": "LGwhtLVR5qLDevOa",
            "name": "Zoom account"
          }
        }
      },
      {
        "parameters": {},
        "id": "59d9aa3b-aaa6-40c9-af9e-ea62c5e11349",
        "name": "Think1",
        "type": "@n8n/n8n-nodes-langchain.toolThink",
        "position": [
          1740,
          600
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "model": {
            "__rl": true,
            "mode": "list",
            "value": "gpt-4o-mini"
          },
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "typeVersion": 1.2,
        "position": [
          1480,
          480
        ],
        "id": "374bd5ab-d412-4bdc-a5c0-6a0ed0b0ea29",
        "name": "OpenAI Chat Model1",
        "credentials": {
          "openAiApi": {
            "id": "mZmtXFUS96bmcfEG",
            "name": "OpenAi account 2"
          }
        }
      }
    ],
    "connections": {
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Zoom: Get transcripts data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Filter transcript URL": {
        "main": [
          [
            {
              "node": "Filter: Only 1 item",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Filter: Only 1 item": {
        "main": [
          [
            {
              "node": "Filter: Only 1 item",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Zoom: Get transcript file",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Zoom: Get transcript file": {
        "main": [
          [
            {
              "node": "Extract text from transcript file",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract text from transcript file": {
        "main": [
          [
            {
              "node": "Format transcript text",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Format transcript text": {
        "main": [
          [
            {
              "node": "Zoom: Get participants data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Zoom: Get participants data": {
        "main": [
          [
            {
              "node": "Create meeting summary",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Sort for mail delivery": {
        "main": [
          [
            {
              "node": "Format to html",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Format to html": {
        "main": [
          [
            {
              "node": "Gmail",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create tasks": {
        "ai_tool": [
          [
            {
              "node": "Create tasks and follow-up call",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Zoom: Get transcripts data": {
        "main": [
          [
            {
              "node": "Filter transcript URL",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "No Recording/Transcript available",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Think": {
        "ai_tool": [
          [
            {
              "node": "Create tasks and follow-up call",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Create meeting summary": {
        "main": [
          [
            {
              "node": "Sort for mail delivery",
              "type": "main",
              "index": 0
            },
            {
              "node": "Create tasks and follow-up call",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Create tasks and follow-up call",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Zoom": {
        "ai_tool": [
          [
            {
              "node": "Create tasks and follow-up call",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Think1": {
        "ai_tool": [
          [
            {
              "node": "Create meeting summary",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Create meeting summary",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      }
    },
    "pinData": {},
    "meta": {
      "templateCredsSetupCompleted": true,
      "instanceId": "4afd9ec5adfd27d1d071c6a1624b9a4e4c099f35d2505888f7e88515aed1b86c"
    }
  }